name: Build Library

on:
  workflow_call:
    inputs: {}
    secrets:
      repo_token:
        required: true

permissions:
  id-token: write # to enable use of OIDC for npm provenance
  attestations: write
  actions: read
  contents: read
  pull-requests: read

jobs:
  build:
    runs-on: ubuntu-20.04
    outputs:
      manifest_name: ${{steps.tarball.outputs.manifest_name}}
      tarball_name: ${{steps.tarball.outputs.tarball_name}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Verify dependencies provenance
        run: npm audit signatures

      - name: Determine next version
        id: next-version
        env:
          GITHUB_TOKEN: ${{ secrets.repo_token }}
        run: |
          NEXT_VERSION=$(npx semantic-release --dry-run | grep -oP 'The next release version is \K[0-9]+\.[0-9]+\.[0-9]+' || echo '')
          if [ -n "$NEXT_VERSION" ]; then
            echo "Next version will be: $NEXT_VERSION"
            echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "No new version to be released"
            echo "version=none" >> $GITHUB_OUTPUT
          fi

      - name: Build Library
        run: npm run build

      - name: Set new version
        if: steps.next-version.outputs.version != 'none'
        run: npm version ${{ steps.next-version.outputs.version }} --no-git-tag-version

      - name: Generate tarball with next version
        id: tarball
        run: |
          npm pack
          echo "TARBALL_NAME=$(ls *.tgz)" >> $GITHUB_OUTPUT

          npm pack --json > manifest.json
          echo "MANIFEST_NAME=manifest.json" >> $GITHUB_OUTPUT
          git checkout package.json package-lock.json

      - name: Generate build provenance
        if: steps.next-version.outputs.version != 'none'
        id: provenance
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: ${{ steps.tarball.outputs.tarball_name }}

      - name: Copy attestation file
        if: steps.next-version.outputs.version != 'none'
        run: cp ${{steps.provenance.outputs.bundle-path}} ./attestation.json

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: npm-package-artifacts
          path: |
            ${{ steps.tarball.outputs.manifest_name}}
            ${{ steps.tarball.outputs.tarball_name }}
            ${{ steps.next-version.outputs.version != 'none' && 'attestation.json' || '' }}

  test:
    needs: ["build"]
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        node-version: [18, 20]
    name: Test Node ${{ matrix.node-version }}
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - uses: actions/download-artifact@v4
        with:
          name: npm-package-artifacts
          path: "./"

      - name: Setup test project
        run: |
          # Create package.json with proper type module
          cat << EOF > package.json
          {
            "name": "package-test",
            "private": true,
            "type": "module",
            "engines": {
              "node": ">=18"
            }
          }
          EOF

      - name: Install dependencies
        run: |
          # Install all peer dependencies from the package
          PEER_DEPS="react"
          echo "Installing peer dependencies: $PEER_DEPS"
          npm install -S $PEER_DEPS

          # Install the package itself
          npm install -S ./${{needs.build.outputs.tarball_name}}

      - name: Create test files
        run: |
          # ESM test file
          cat << 'EOF' > test-esm.mjs
          import * as lib from '@yldio/percoct-ui';

          // List of expected exports
          const EXPECTED_EXPORTS = ['Button'];

          // Verify all expected exports exist
          for (const exp of EXPECTED_EXPORTS) {
            if (!lib[exp]) throw new Error(`Export "${exp}" not found`);
            console.log(`âœ“ Found export: ${exp}`);
          }

          // Log all available exports for reference
          console.log('\nAll available exports:', Object.keys(lib));
          console.log('âœ“ ESM import test successful');
          EOF

          # CommonJS test file
          cat << 'EOF' > test-cjs.cjs
          const lib = require('@yldio/percoct-ui');

          // List of expected exports
          const EXPECTED_EXPORTS = ['Button'];

          // Verify all expected exports exist
          for (const exp of EXPECTED_EXPORTS) {
            if (!lib[exp]) throw new Error(`Export "${exp}" not found`);
            console.log(`âœ“ Found export: ${exp}`);
          }

          // Log all available exports for reference
          console.log('\nAll available exports:', Object.keys(lib));
          console.log('âœ“ CommonJS import test successful');
          EOF

      - name: Run import tests
        run: |
          echo "ðŸ§ª Testing ESM imports..."
          node test-esm.mjs

          echo -e "\nðŸ§ª Testing CommonJS imports..."
          node test-cjs.cjs
